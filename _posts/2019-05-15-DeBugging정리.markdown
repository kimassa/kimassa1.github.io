# DeBugging

___

TRACEBACK 분석하기

- 아래서부터 역순으로 읽어나가되 내가 입력한 부분이 아닌 내용(내부에러)는 skip하자
- 아래서부터 가까운 부분(최근 에러)에서 발생했을 확률이 높음
- 에러가 일어난 부분의 원인이 되는 코드를 print()하여 결과물을 확인해보자

1. 

2.

Syntax Error(구문오류)
-> 프로그램을 종료해버림

Runtime Error(런타임오류) : Exception
-> 실행전에는 나타나지않음! 실행후에야 나타나는 런타임 오류!

Semantic Error(의미오류)
-> 프로그램이 종료가 안됨!!

3. 프로그래밍 =  프로그램이 원하는 동작을 할때까지 프로그램을 점진적으로 디버깅하는 것

4. 
Pre condition(사전조건)
-> 함수의 실행전에 반드시 마련되야하는 조건 
호출자가 책임을 진다
호출자가 사전조건을 어기지않았는지 확인!

Post condition(사후조건)
-> 함수의 종료에 필요한 조건

5. 
오류메세지 확인할 부분
- 에러의 종류가 무엇인가?
- 에러가 발생한 곳은 어디인가?

white space error 잘찾아야함

오류메시지는 5번줄을 가리키지만, 해당줄에는 잘못된 것이 없다
진짜 오류를 찾으려면 ratio값을 print로 확인해봐야하고, 이 값이 0이라는 것을 알 수있다.
문제는 4번줄에 있다. 4번줄은 부동소수점 나눗셈대신 몫연산을 사용했다.

(중요)결론 -> 
[1] 오류메세지가 모두 올바르다고 가정해서는 안된다!!
[2] 오류메세지가 발생한 부분 이외에 발생의 원인이 될만한 부분을 거슬러 올라가며 print찍어서 내용을 확인하자!

6. 
함수가 동작하지 않는다면 3가지 가능성이 있음
[1] 함수가 가져오는 인수에 뭔가 문제가 있다. Pre-condition(사전조건)에 위배되는지 확인하기 
[2] 함수 자체에 뭔가 문제가 있다. Post-condition(사후조건)에 위배되는지 확인하기
[3] 반환값에 뭔가 문제가 있다. 또는 반환값을 사용하는 방식에 문제가 있다.


함수의 시작부분에 print문을 추가해서 인자들의 값을(또는 타입역시)표시해 보자!
사전조건을 명확하게 검사하는 코드를 작성해보자!

인자에 문제가 없어보이면 return문앞에 print문을 추가하여 반환값을 표시해보자!
직접 함수 실행시켜서 호출하라! 결과를 확인하기 쉬운값으로 함수를 호출하면 좋겠지!

함수가 제대로 동작하면 반환값이 올바르게 사용되는지(또는 전혀 사용되지 않는지)확인하라!

함수의 시작과 끝에 print문을 추가하면 실행흐름을 시각적으로 보이게 만들수있다!


7.

디버깅 시간을 줄이는 방법! -> '분할하며 디버깅 하라!'
중간 지점 검사해서 
문제있으면 앞부분이 문제!
문제 없으면 뒷부분이 문제!

오류가 있을만한 위치와 검사를 넣기쉬운 위치를 생각해라!
검사 위치의 앞과 뒤에서 버그가 같은지 확인할 수 있다고 생각되는 위치를 선택하라!

8. [여기 다시보기!!]
index를 사용해 시퀀스의 값을 순회하는 경우 순회의 시작과 끝을 올바르게 얻는 것이 어려움!

에러가 표시된줄 바로 앞에 index값을 print해보자!
다이어그램을 그려보자!

9. 워드플레이

10. 리스트
11. 사전
12. 튜플
13. 자료구조 고르기
14. 파일
15. 클래스와 객체
16. 클래스와 함수
17. 클래스와 메서드
18. 상속
19.
20. 디버깅
